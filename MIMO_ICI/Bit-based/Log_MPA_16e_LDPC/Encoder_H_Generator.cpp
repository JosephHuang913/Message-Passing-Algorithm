// WiMAX 802.16e LDPC H Generator
// Editor: Shih Yun Yi
// Date: 2008/10

// Coding rate: 1/2=>1, 2/3A=>2, 2/3B=>3, 3/4A=>4,3/4B=>5, 5/6=>6
// Z factor: 24, 28, 32, 36, 40, 44,  48,  52,  56,  60,  64,  68,  72,  76,  80,  84,  88,  92,  96
// n bits:  576,672,768,864,960,1056,1152,1248,1344,1440,1536,1632,1728,1824,1920,2016,2112,2208,2304

// rate 1/2 base model matrix
#include "stdafx.h"
# include <stdio.h>
# include <stdlib.h>
# include <iostream>
using namespace std;


void Encoder_H_Generator(int CodeType,int z_factor,int **H,int **inv_T)
{

	int i, j, k, m, HbmRow, HbmCol;
	int Hbm[12][24];

	// CodeType=1/2
	int A1[12][24]	= {{-1, 94, 73, -1, -1, -1, -1, -1, 55, 83, -1, -1,  7,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
					   {-1, 27, -1, -1, -1, 22, 79,  9, -1, -1, -1, 12, -1,  0,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1},
					   {-1, -1, -1, 24, 22, 81, -1, 33, -1, -1, -1,  0, -1, -1,  0,  0, -1, -1, -1, -1, -1, -1, -1, -1},
					   {61, -1, 47, -1, -1, -1, -1, -1, 65, 25, -1, -1, -1, -1, -1,  0,  0, -1, -1, -1, -1, -1, -1, -1},
					   {-1, -1, 39, -1, -1, -1, 84, -1, -1, 41, 72, -1, -1, -1, -1, -1,  0,  0, -1, -1, -1, -1, -1, -1},
					   {-1, -1, -1, -1, 46, 40, -1, 82, -1, -1, -1, 79,  0, -1, -1, -1, -1,  0,  0, -1, -1, -1, -1, -1},
					   {-1, -1, 95, 53, -1, -1, -1, -1, -1, 14, 18, -1, -1, -1, -1, -1, -1, -1,  0,  0, -1, -1, -1, -1},
					   {-1, 11, 73, -1, -1, -1,  2, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0, -1, -1, -1},
					   {12, -1, -1, -1, 83, 24, -1, 43, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0, -1, -1},
					   {-1, -1, -1, -1, -1, 94, -1, 59, -1, -1, 70, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0, -1},
					   {-1, -1,  7, 65, -1, -1, -1, -1, 39, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0},
					   {43, -1, -1, -1, -1, 66, -1, 41, -1, -1, -1, 26,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0}};

	// CodeType=2/3A
	int A2[8][24]	= {{ 3,  0, -1, -1,  2,  0, -1,  3,  7, -1,  1,  1, -1, -1, -1, -1,  1,  0, -1, -1, -1, -1, -1, -1},
					   {-1, -1,  1, -1, 36, -1, -1, 34, 10, -1, -1, 18,  2, -1,  3,  0, -1,  0,  0, -1, -1, -1, -1, -1},
					   {-1, -1, 12,  2, -1, 15, -1, 40, -1,  3, -1, 15, -1,  2, 13, -1, -1, -1,  0,  0, -1, -1, -1, -1},
					   {-1, -1, 19, 24, -1,  3,  0, -1,  6, -1, 17, -1, -1, -1,  8, 39, -1, -1, -1,  0,  0, -1, -1, -1},
					   {20, -1,  6, -1, -1, 10, 29, -1, -1, 28, -1, 14, -1, 38, -1, -1,  0, -1, -1, -1,  0,  0, -1, -1},
					   {-1, -1, 10, -1, 28, 20, -1, -1,  8, -1, 36, -1,  9, -1, 21, 45, -1, -1, -1, -1, -1,  0,  0, -1},
					   {35, 25, -1, 37, -1, 21, -1, -1,  5, -1, -1,  0, -1,  4, 20, -1, -1, -1, -1, -1, -1, -1,  0,  0},
					   {-1,  6,  6, -1, -1, -1,  4, -1, 14, 30, -1,  3, 36, -1, 14, -1,  1, -1, -1, -1, -1, -1, -1,  0}};

	// CodeType=2/3B
	int A3[8][24]	= {{ 2, -1, 19, -1, 47, -1, 48, -1, 36, -1, 82, -1, 47, -1, 15, -1, 95,  0, -1, -1, -1, -1, -1, -1},
					   {-1, 69, -1, 88, -1, 33, -1,  3, -1, 16, -1, 37, -1, 40, -1, 48, -1,  0,  0, -1, -1, -1, -1, -1},
					   {10, -1, 86, -1, 62, -1, 28, -1, 85, -1, 16, -1, 34, -1, 73, -1, -1, -1,  0,  0, -1, -1, -1, -1},
		   			   {-1, 28, -1, 32, -1, 81, -1, 27, -1, 88, -1,  5, -1, 56, -1, 37, -1, -1, -1,  0,  0, -1, -1, -1},
					   {23, -1, 29, -1, 15, -1, 30, -1, 66, -1, 24, -1, 50, -1, 62, -1, -1, -1, -1, -1,  0,  0, -1, -1},
					   {-1, 30, -1, 65, -1, 54, -1, 14, -1,  0, -1, 30, -1, 74, -1,  0, -1, -1, -1, -1, -1,  0,  0, -1},
					   {32, -1,  0, -1, 15, -1, 56, -1, 85, -1,  5, -1,  6, -1, 52, -1,  0, -1, -1, -1, -1, -1,  0,  0},
					   {-1,  0, -1, 47, -1, 13, -1, 61, -1, 84, -1, 55, -1, 78, -1, 41, 95, -1, -1, -1, -1, -1, -1,  0}};

	// CodeType=3/4A
	int A4[6][24]	= {{ 6, 38,  3, 93, -1, -1, -1, 30, 70, -1, 86, -1, 37, 38,  4, 11, -1, 46, 48,  0, -1, -1, -1, -1},
					   {62, 94, 19, 84, -1, 92, 78, -1, 15, -1, -1, 92, -1, 45, 24, 32, 30, -1, -1,  0,  0, -1, -1, -1},
					   {71, -1, 55, -1, 12, 66, 45, 79, -1, 78, -1, -1, 10, -1, 22, 55, 70, 82, -1, -1,  0,  0, -1, -1},
					   {38, 61, -1, 66,  9, 73, 47, 64, -1, 39, 61, 43, -1, -1, -1, -1, 95, 32,  0, -1, -1,  0,  0, -1},
					   {-1, -1, -1, -1, 32, 52, 55, 80, 95, 22,  6, 51, 24, 90, 44, 20, -1, -1, -1, -1, -1, -1,  0,  0},
					   {-1, 63, 31, 88, 20, -1, -1, -1,  6, 40, 56, 16, 71, 53, -1, -1, 27, 26, 48, -1, -1, -1, -1,  0}};

	// CodeType=3/4B
	int A5[6][24]	= {{-1, 81, -1, 28, -1, -1, 14, 25, 17, -1, -1, 85, 29, 52, 78, 95, 22, 92,  0,  0, -1, -1, -1, -1},
					   {42, -1, 14, 68, 32, -1, -1, -1, -1, 70, 43, 11, 36, 40, 33, 57, 38, 24, -1,  0,  0, -1, -1, -1},
					   {-1, -1, 20, -1, -1, 63, 39, -1, 70, 67, -1, 38,  4, 72, 47, 29, 60,  5, 80, -1,  0,  0, -1, -1},
					   {64,  2, -1, -1, 63, -1, -1,  3, 51, -1, 81, 15, 94,  9, 85, 36, 14, 19, -1, -1, -1,  0,  0, -1},
					   {-1, 53, 60, 80, -1, 26, 75, -1, -1, -1, -1, 86, 77,  1,  3, 72, 60, 25, -1, -1, -1, -1,  0,  0},
					   {77, -1, -1, -1, 15, 28, -1, 35, -1, 72, 30, 68, 85, 84, 26, 64, 11, 89,  0, -1, -1, -1, -1,  0}};

	// CodeType=5/6
	int A6[4][24]	= {{ 1, 25, 55, -1, 47,  4, -1, 91, 84,  8, 86, 52, 82, 33,  5,  0, 36, 20,  4, 77, 80,  0, -1, -1},
					   {-1,  6, -1, 36, 40, 47, 12, 79, 47, -1, 41, 21, 12, 71, 14, 72,  0, 44, 49,  0,  0,  0,  0, -1},
					   {51, 81, 83,  4, 67, -1, 21, -1, 31, 24, 91, 61, 81,  9, 86, 78, 60, 88, 67, 15, -1, -1,  0,  0},
					   {68, -1, 50, 15, -1, 36, 13, 10, 11, 20, 53, 90, 29, 92, 57, 30, 84, 92, 11, 66, 80, -1, -1,  0}};


	// Define Hbm matrix
	switch (CodeType)
	{
		case 1:   // CodeType=1/2

			HbmRow = 12;
			HbmCol = 24;
			
			for (i=0;i<HbmRow;i++)
			{
				for (j=0;j<HbmCol;j++)
				{
					Hbm[i][j]=A1[i][j];
				}
			}
			
			break;

		case 2:   // CodeType=2/3A

			HbmRow = 8;
			HbmCol = 24;
			
			for (i=0;i<HbmRow;i++)
			{
				for (j=0;j<HbmCol;j++)
				{
					Hbm[i][j]=A2[i][j];
				}
			}

			break;

		case 3:   // CodeType=2/3B

			HbmRow = 8;
			HbmCol = 24;
			
			for (i=0;i<HbmRow;i++)
			{
				for (j=0;j<HbmCol;j++)
				{
					Hbm[i][j]=A3[i][j];
				}
			}

			break;

		case 4:   // CodeType=3/4A

			HbmRow = 6;
			HbmCol = 24;
			
			for (i=0;i<HbmRow;i++)
			{
				for (j=0;j<HbmCol;j++)
				{
					Hbm[i][j]=A4[i][j];
				}
			}

			break;

		case 5:   // CodeType=3/4B

			HbmRow = 6;
			HbmCol = 24;
			
			for (i=0;i<HbmRow;i++)
			{
				for (j=0;j<HbmCol;j++)
				{
					Hbm[i][j]=A5[i][j];
				}
			}

			break;

		case 6:   // CodeType=5/6

			HbmRow = 4;
			HbmCol = 24;
			
			for (i=0;i<HbmRow;i++)
			{
				for (j=0;j<HbmCol;j++)
				{
					Hbm[i][j]=A6[i][j];
				}
			}

			break;

		default:
			cout << "Undefined Coding Type!!!" << endl;
			break;
	}


	// Adjust shift parameter
	switch (CodeType)
	{
		case 2:   // coding_rate=2/3A
			for (i=0;i<HbmRow;i++)
			{
				for (j=0;j<HbmCol;j++)
				{
					if (Hbm[i][j]>0)
					{
						Hbm[i][j]=(int)(Hbm[i][j]%z_factor);
					}
				}
			}
			break;

		default:
			for (i=0;i<HbmRow;i++)
			{
				for (j=0;j<HbmCol;j++)
				{
					if (Hbm[i][j]>0)
					{
						Hbm[i][j]=(int)(Hbm[i][j]*z_factor/96);
					}
				}
			}
			break;
	}


	// Create Zero matrix and Identity matrix
	int **hhZeros = new int *[z_factor];
	int **hhEyes = new int *[z_factor];

	for (i=0;i<z_factor;i++)
	{
		hhZeros[i] = new int[z_factor];
		hhEyes[i] = new int[z_factor];
	}

	for (i=0;i<z_factor;i++)
	{
		for (j=0;j<z_factor;j++)
		{
			if (i==j)
			{
				hhEyes[i][j]=1;
				hhZeros[i][j]=0;
			}
			else
			{
				hhEyes[i][j]=0;
				hhZeros[i][j]=0;
			}
		}
	}


	// Generate H according to the Hbm
	for (i=0;i<HbmRow;i++)
	{
		for (j=0;j<HbmCol;j++)
		{
			if(Hbm[i][j]==-1)
			{
				for (k=0;k<z_factor;k++)
				{
					for (m=0;m<z_factor;m++)
					{
						H[i*z_factor+k][j*z_factor+m]=hhZeros[k][m];
					}
				}
			}
			else if(Hbm[i][j]==0)
			{
				for (k=0;k<z_factor;k++)
				{
					for (m=0;m<z_factor;m++)
					{
						H[i*z_factor+k][j*z_factor+m]=hhEyes[k][m];
					}
				}
			}
			else
			{
				for (k=0;k<z_factor;k++)
				{
					for (m=0;m<z_factor;m++)
					{
						H[i*z_factor+k][j*z_factor+m]=hhEyes[k][(int)((m+z_factor-(Hbm[i][j]))%z_factor)];
					}
				}
			}
		}
	}

	// Generate inv_T
	for (i=0;i<(HbmRow-1);i++)
	{
		for (j=0;j<(HbmRow-1);j++)
		{
			if (i>=j)
			{
				for (k=0;k<z_factor;k++)
				{
					for (m=0;m<z_factor;m++)
					{
						inv_T[i*z_factor+k][j*z_factor+m]=hhEyes[k][m];
					}
				}
			}
			else
			{
				for (k=0;k<z_factor;k++)
				{
					for (m=0;m<z_factor;m++)
					{
						inv_T[i*z_factor+k][j*z_factor+m]=hhZeros[k][m];
					}
				}
			}
		}
	}
		


	delete[] hhZeros;
	delete[] hhEyes;



}